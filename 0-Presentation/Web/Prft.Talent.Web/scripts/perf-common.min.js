/*
 perfhr 2016-11-06 
*/
function perfUtils() { } !function (a) { var b, c; mainApp.factory("perfInterceptor", ["$q", "$rootScope", function (d, e) { var f = 0; return { request: function (d) { return 1 === ++f && e.$broadcast("loading:progress"), c && a.clearTimeout(c), perfUtils.getInstance().init(), b = (new Date).getTime(), d.headers = d.headers || {}, d }, requestError: function (a) { return d.reject(a) }, response: function (a) { return 0 === --f && e.$broadcast("loading:finish"), 500 === a.data.status ? (perfUtils.getInstance().errorMsg("An Error Occured!"), d.reject(a)) : 409 === a.data.status ? (perfUtils.getInstance().errorMsg(a.data.entity.errorMessage), d.reject(a)) : a }, responseError: function (b) { return 0 === --f && e.$broadcast("loading:finish"), 401 === b.status && (a.location.href = "logout"), d.reject(b) } } }]), mainApp.config(["$httpProvider", function (a) { a.interceptors.push("perfInterceptor") }]); var d = $("#menu"); $(".btn-menu"), $("img"); $('#menu li a[href="#/home"]').parent().addClass("mm-selected"), d.mmenu({ navbars: [{ position: "top", content: ["searchfield", "breadcrumbs"], height: 2 }, { position: "bottom", content: ["<span id='version' class='fa' href='#/'>Version:</span>"] }], extensions: ["widescreen", "theme-dark", "effect-menu-slide"], offCanvas: { position: "left", zposition: "back" }, setSelected: !0, onClick: { setSelected: !0 }, searchfield: !0 }).on("click", 'a[href^="#/"]', function () { return $("#menu li.mm-selected").removeClass("mm-selected"), $(this).parents().addClass("mm-selected"), a.location.href = $(this).attr("href"), !1 }); var e = d.data("mmenu"); $("#sidePanel").on("click", function (a) { a.preventDefault(), $(this).hasClass("mm-opened") ? (e.close(), d.hide()) : (e.open(), d.show()) }), d.find(".mm-next").addClass("mm-fullsubopen"), $("#divContainer").on("click", ".feature i", function () { a.location.href = $(this).attr("nav") }), $(document).on("hidden.bs.modal", 'div[role="dialog"]', function () { var a = $(this).attr("id"); $("#" + a + " .help-block").empty(), $("#" + a + " p.text-danger").remove(), $("#" + a + " .has-error").removeClass("has-error"), "undefined" != typeof scope && (scope.data = {}) }) }(window); var perfHrApp = angular.module("perficientHr"), urlPrefix = "v-", PerfWidgetCache = [], lastRequestTime = (new Date).getTime(), timeoutHandle; !function () { var a = angular.module("perficientHr"); a.constant("factoryData", {}), a.constant("filterNames", { revertNewLine: "revertNewLine", splitColon: "splitColon", calculateDayDiff: "calculateDayDiff" }) }(); var perfUrl = { validateSession: "user/validateSession", getVersion: "version", loadAllEmployees: urlPrefix + "employee/loadAllEmployees", loadEmployees: urlPrefix + "employee/loadEmployees", loadEmployee: urlPrefix + "employee/loadEmployee", loadEmployeeById: urlPrefix + "employee/loadEmployeeById?employeeId=", updateEmployee: urlPrefix + "employee/updateEmployee", addEmployee: urlPrefix + "employee/addEmployee", loadEmployeeByDesHistory: urlPrefix + "employee/loadEmployeeByDesHistory/{fromDate}/{toDate}/{designation}", loadDesignations: urlPrefix + "designation/loadDesignations", loadDesignationById: urlPrefix + "designation/loadDesignationById?id=", addDesignation: urlPrefix + "designation/addDesignation", updateDesignation: urlPrefix + "designation/updateDesignation", deleteDesignation: urlPrefix + "designation/deleteDesignation", loadProjects: urlPrefix + "projects/loadProjects", addProject: urlPrefix + "projects/addProject", updateProject: urlPrefix + "projects/updateProject", deleteProject: urlPrefix + "projects/deleteProject", loadProjectById: urlPrefix + "projects/loadProjectById?projectPk=", loadProjectMembersByProjectId: urlPrefix + "projectmembers/loadProjectMembersByProjectId?projectId=", loadAllProjectMembers: urlPrefix + "projectmembers/loadAllProjectMembers", loadProjectMemberById: urlPrefix + "projectmembers/loadProjectMemberById?projectMemberId=", saveProjectMember: urlPrefix + "projectmembers/saveProjectMember", updateProjectMember: urlPrefix + "projectmembers/updateProjectMember", deleteProjectMember: urlPrefix + "projectmembers/deleteProjectMember", importPto: urlPrefix + "leave/fetchExcel", carryLeaves: urlPrefix + "leave/carryLeaves/{year}", getCarryLeaves: urlPrefix + "leave/getCarryLeaves/{year}", applyLeave: urlPrefix + "leave/applyLeave", loadAllLeaves: urlPrefix + "leave/loadAllLeaves/{leaveType}/{calYear}", updateLeave: urlPrefix + "leave/updateLeave", deleteLeave: urlPrefix + "leave/deleteLeave", loadLeaveById: urlPrefix + "leave/loadLeaveById?leaveId=", loadMyLeaves: urlPrefix + "leave/loadMyLeaves/{leaveType}/{calYear}", getLeaveBalance: urlPrefix + "leave/getLeaveBalance/{leaveType}/{calYear}/{calMonth}", loadLeaveReport: urlPrefix + "leave/loadLeaveReport", loadAllLeaveReport: urlPrefix + "leave/loadAllLeaveReport", loadNotificationCount: urlPrefix + "notification/loadNotificationCount", reportsLoadBySbu: urlPrefix + "reportJobTitle/loadBySbu/{fromDate}/{toDate}/{sbu}/{designation}", loadRoles: urlPrefix + "roles/loadRoles", loadRolesById: urlPrefix + "roles/loadRolesById?id=", addRoles: urlPrefix + "roles/addRoles", updateRoles: urlPrefix + "roles/updateRoles", deleteRoles: urlPrefix + "roles/deleteRoles", loadComponents: urlPrefix + "components/loadComponents", loadComponentsById: urlPrefix + "components/loadComponentsById?id=", addComponent: urlPrefix + "components/addComponent", updateComponent: urlPrefix + "components/updateComponent", deleteComponent: urlPrefix + "components/deleteComponent", saveEmpRoles: urlPrefix + "emproles/saveEmpRoles", loadNonEmpByRoles: urlPrefix + "emproles/loadNonEmpByRoles?roleId=", loadEmpByRoles: urlPrefix + "emproles/loadEmpByRoles?roleId=" }; perfUtils.getInstance = function () { var a = PerfWidgetCache.perfIns; return a || (a = PerfWidgetCache.perfIns = new perfUtils), a }, perfUtils.prototype = { init: function () { ((new Date).getTime() - lastRequestTime) / 6e4 > 30 ? window.location.href = "logout" : timeoutHandle = window.setTimeout("perfUtils.getInstance().init()", 1e4) }, compareDate: function () { if (new Date(moment.utc($("#startDt").val(), "DD-MMM-YYYY")).getTime() > new Date(moment.utc($("#endDt").val(), "DD-MMM-YYYY")).getTime()) { var a = '<p class="text-danger"></p>'; $("#startDt").parent().addClass("has-error"), $(a).html($("#startDt").attr("name") + " must be lesser than " + $("#endDt").attr("name") + ".").insertAfter($("#startDt")) } }, validateFutureDate: function (a) { $.each(a, function (a, b) { if (new Date(moment.utc($("#" + b).val(), "DD-MMM-YYYY")).getTime() > (new Date).getTime()) { var c = '<p class="text-danger"></p>'; $("#" + b).parent().addClass("has-error"), $(c).html($("#" + b).attr("name") + " must be lesser than present date.").insertAfter($("#" + b)) } }) }, resetForm: function () { $("form .help-block").html(""), $("form").find(":input[name]").val("") }, successMsg: function (a) { $.alert({ title: "Message:", columnClass: "col-md-6 col-md-offset-3", content: a, confirmButtonClass: "btn-success" }) }, errorMsg: function (a) { $.alert({ title: "Error:", theme: "black", columnClass: "col-md-6 col-md-offset-3", content: a, confirmButtonClass: "btn-danger" }) } }, function () { function a(a, b, h, i) { var j = $(a).attr("name"), k = $(a).attr("required"), l = $(a).attr("ng-minlength"), m = $(a).attr("ng-maxlength"), n = ""; "undefined" != typeof k && 0 === $.trim(b).length ? n = e : b.length > 0 && ("" === h || h.test(b) ? "undefined" != typeof l && $.trim(b).length < l ? n = c : "undefined" != typeof m && $.trim(b).length > m && (n = d) : n = f), 0 !== $.trim(n).length && ($(a).parent().addClass("has-error"), $(g).html(j + n).insertAfter($(a))) } function b(b, c) { var d = $(b).find(".help-block"); $(d).empty(), $(b).find("div").add("p").removeClass("has-error"), $(b).find("p.text-danger").remove(), $(b).find("ol.nya-bs-select, :input[name]").each(function (b, c) { var e = $(c).attr("validType"), f = "", g = ""; void 0 !== e && ("select" === e ? (f = "" === $(c).find(":selected").text() ? $(c).attr("ng-selected") : $(c).find(":selected").text(), $(c).attr("multiple") && "[]" === f && (f = "")) : (f = $(c).val(), "text-only" === e ? g = /^[a-zA-Z ]*$/ : "number-only" === e ? g = /^[0-9]+$/ : "email" === e ? g = /^([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5})$/ : "date" === e ? g = /^(([0-9])|([0-2][0-9])|([3][0-1]))\-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\-\d{4}$/ : "date-time" === e ? g = /^(0?[1-9]|[12][0-9]|3[01])-(jan|Jan|JAN|feb|Feb|FEB|mar|Mar|MAR|apr|Apr|APR|may|May|MAY|jun|Jun|JUN|jul|Jul|JUL|aug|Aug|AUG|sep|Sep|SEP|oct|Oct|OCT|nov|Nov|NOV|dec|Dec|DEC)-(19|20)\d\d\s([0-1][0-9]|[2][0-3]):([0-5][0-9])(\s{0,1})(AM|PM|am|pm|aM|Am|pM|Pm{2,2})$/ : "alpha-numeric" === e ? g = /^[a-zA-Z0-9 ]*$/ : "all-chars" === e && (g = "")), a(c, f, g, d)) }); try { c.validate() } catch (e) { } return 0 === $(b).find("p.text-danger").length } var c = " is too short.", d = " is too long.", e = " is required.", f = " is invalid.", g = '<p class="text-danger"></p>'; mainApp.directive("ajaxLoading", function () { return { restrict: "A", link: function (a) { return a.$on("loading:progress", function () { $("#overlay").show() }), a.$on("loading:finish", function () { $("#overlay").hide() }) } } }).directive("button", function () { return { restrict: "E", link: function (a, c, d) { "submit" === d.type && c.on("click", function () { b($(c).parents("form"), a) && a[d.action]() }) } } }).directive("fileModel", ["$parse", function (a) { return { restrict: "A", link: function (b, c, d) { var e = a(d.fileModel), f = e.assign; c.bind("change", function () { b.$apply(function () { f(b, c[0].files[0]) }) }) } } }]) }(), function (a) { mainApp.factory("commonAPIservice", ["$http", function (a) { var b = {}; return b.loadRecords = function (b) { return a({ method: "get", url: b }) }, b.add = function (b, c) { return a({ method: "post", data: c, url: b }) }, b.updateDel = function (b, c) { return a({ method: "put", data: c, url: b }) }, b }]) }(angular), function (a) { var b = function (a, b, c, d, e, f) { var g = this; g.vm = b, g.service = c, b.scope.add = function () { g.add() }, b.scope.save = function () { g.save() }, b.scope.update = function () { g.update() }, b.scope.del = function () { g.del(b.deleteUrl) }, b.scope.title = b.title; var h = { vm: b.scope, compile: d, DtOptionsBuilder: e, DTColumnBuilder: f, service: c, loadListUrl: b.loadListUrl, editFormId: b.formId, deleteFormId: "deleteRecord" }; perfDatatable.loadTable.init(h) }; b.prototype.add = function () { this.vm.scope.data = {}, perfUtils.getInstance().resetForm(), $("#" + this.vm.formId).modal() }, b.prototype.save = function () { var a = this; this.service.add(a.vm.addUrl, a.vm.scope.data).success(function (b) { perfUtils.getInstance().successMsg(a.vm.title + " Saved Successfully!"), a.vm.scope.dtInstance.reloadData(), $("#" + a.vm.formId).modal("hide") }) }, b.prototype.update = function () { var a = this; this.service.updateDel(a.vm.updateUrl, a.vm.scope.data).success(function (b) { $("#" + a.vm.formId).modal("hide"), perfUtils.getInstance().successMsg(a.vm.title + " updated Successfully!"), a.vm.scope.dtInstance.reloadData() }) }, b.prototype.del = function () { var a = this; this.service.updateDel(a.vm.deleteUrl, a.vm.scope.data).success(function (b) { a.vm.scope.dtInstance.DataTable.row(".selected").remove().draw(!1), $("#deleteRecord").modal("hide"), perfUtils.getInstance().successMsg(a.vm.title + " deleted Successfully!") }) }, b.$inject = ["_this", "vm", "commonAPIservice", "$compile", "DTOptionsBuilder", "DTColumnBuilder"], mainApp.controller("AbstractController", b) }(angular), function (a) { var b = a.perfDatatable || {}; this.params = null, b.loadTable = { init: function (a) { this.params = a; var c = !0, d = !0, e = !0; a.vm.message = "", a.vm.dtInstance = {}, a.vm.datalist = {}, a.url = a.loadListUrl ? a.loadListUrl : "", a.editRow = void 0 === a.editRow ? c : a.editRow, a.deleteRow = void 0 === a.deleteRow ? d : a.deleteRow, a.actions = void 0 === a.actions ? e : a.actions, a.responsive = a.responsive ? a.responsive : !1, b.loadTable.loadDataTable(a) }, loadDataTable: function (a) { function b(b) { a.scope ? a.compile(angular.element(b).contents())(a.scope) : a.compile(angular.element(b).contents())(a.vm) } function c(b) { a.vm.datalist[b.pk] = b; var c = "", d = ""; return a.editRow && (c = '<button class="btn btn-edit" data-toggle="modal" onclick="perfDatatable.loadTable.popRecord(this, ' + b.pk + ", " + a.editFormId + ')">   <i class="fa fa-pencil"></i></button>&nbsp;'), a.deleteRow && (d = '<button class="btn btn-danger" data-toggle="modal" onclick="perfDatatable.loadTable.popRecord(this, ' + b.pk + ", " + a.deleteFormId + ')">   <i class="fa fa-trash-o"></i></button>'), c + d } a.vm.dtOptions = a.DtOptionsBuilder.fromSource(a.url).withDataProp("entity").withDisplayLength(7).withOption("lengthMenu", [7, 10, 25, 50, 100]).withDOM("pitrfl").withBootstrap().withOption("responsive", a.responsive).withOption("createdRow", b).withOption("aaSorting", [void 0 === a.sortCol ? 0 : a.sortCol, "asc"]).withPaginationType("full_numbers").withOption("oLanguage", { sEmptyTable: void 0 === a.vm.sEmptyTable ? "No Records Found." : a.vm.sEmptyTable }).withColumnFilter().withButtons([{ extend: "excel", title: "Perficient Chennai - " + a.vm.title, exportOptions: { columns: a.actions === !1 ? "" : ":not(:last-child)" } }, { extend: "print", exportOptions: { columns: a.actions === !1 ? "" : ":not(:last-child)" } }]), a.actions && a.vm.dtColumns.push(a.DTColumnBuilder.newColumn(null).withTitle("Actions").notSortable().renderWith(c)) }, popRecord: function (a, b, c) { this.params.vm.dtInstance.DataTable.$("tr.selected").removeClass("selected"), $(a).parents("tr").addClass("selected"), this.params.vm.data = angular.copy(this.params.vm.datalist[b]), this.params.vm.$apply(), $(c).modal("show") } }, a.perfDatatable = b }(this);